{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","console","log","react_default","a","createElement","className","href","Counter","prevProps","prevState","counter","value","this","props","classes","_this","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","Component","Counters","_this$props","onReset","counters","map","components_counter","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleIncrement","toConsumableArray","index","indexOf","objectSpread","setState","handleDelete","counterId","filter","c","handleReset","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAiBeA,EAdA,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,cAEhB,OADAC,QAAQC,IAAI,qBAEVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,SACS,IACPJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oCACbN,MCuFIQ,6LA9FMC,EAAWC,GAC5BT,QAAQC,IAAI,YAAaO,GACzBR,QAAQC,IAAI,YAAaQ,GAErBD,EAAUE,QAAQC,MAAUC,KAAKC,MAAMH,QAAQC,qDAMnDX,QAAQC,IAAI,+DAyCZ,IAAIa,EAAU,mBAGd,OADAA,GAAwC,IAA7BF,KAAKC,MAAMH,QAAQC,MAAc,UAAY,gDAI5C,IAEJA,EAAUC,KAAKC,MAAMH,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,mCAGvB,IAAAI,EAAAH,KAGP,OADAZ,QAAQC,IAAI,sBAEVC,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAA,QAAMC,UAAWO,KAAKI,mBAAoBJ,KAAKK,eAC/Cf,EAAAC,EAAAC,cAAA,UAKEc,QAAS,kBAAMH,EAAKF,MAAMM,YAAYJ,EAAKF,MAAMH,UACjDL,UAAU,4BANZ,aAUAH,EAAAC,EAAAC,cAAA,UACEc,QAAS,kBAAMH,EAAKF,MAAMO,SAASL,EAAKF,MAAMH,QAAQW,KACtDhB,UAAU,6BAFZ,kBAlFciB,aCuBPC,mLApBXvB,QAAQC,IAAI,uBADL,IAAAuB,EAE8CZ,KAAKC,MAAlDY,EAFDD,EAECC,QAASC,EAFVF,EAEUE,SAAUN,EAFpBI,EAEoBJ,SAAUD,EAF9BK,EAE8BL,YACrC,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQc,QAASO,EAASpB,UAAU,8BAApC,SAGCqB,EAASC,IAAI,SAAAjB,GAAO,OACnBR,EAAAC,EAAAC,cAACwB,EAAD,CACEC,IAAKnB,EAAQW,GACbD,SAAUA,EACVD,YAAaA,EACbT,QAASA,cAdEY,aCkFRQ,qBArEb,SAAAA,IAAc,IAAAf,EAAA,OAAAgB,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACZf,EAAAgB,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,QAVFwB,MAAQ,CACNV,SAAU,CACR,CAAEL,GAAI,EAAGV,MAAO,GAChB,CAAEU,GAAI,EAAGV,MAAO,GAChB,CAAEU,GAAI,EAAGV,MAAO,GAChB,CAAEU,GAAI,EAAGV,MAAO,KAINI,EASdsB,gBAAkB,SAAA3B,GAEhB,IAAMgB,EAAQK,OAAAO,EAAA,EAAAP,CAAOhB,EAAKqB,MAAMV,UAC1Ba,EAAQb,EAASc,QAAQ9B,GAC/BgB,EAASa,GAATR,OAAAU,EAAA,EAAAV,CAAA,GAAuBrB,GACvBgB,EAASa,GAAO5B,QAChBI,EAAK2B,SAAS,CAAEhB,cAfJX,EAmBd4B,aAAe,SAAAC,GACb5C,QAAQC,IAAI,uBAAwB2C,GACpC,IAAMlB,EAAWX,EAAKqB,MAAMV,SAASmB,OAAO,SAAAC,GAAC,OAAIA,EAAEzB,KAAOuB,IAC1D7B,EAAK2B,SAAS,CAAEhB,cAtBJX,EAyBdgC,YAAc,WACZ,IAAMrB,EAAWX,EAAKqB,MAAMV,SAASC,IAAI,SAAAmB,GAEvC,OADAA,EAAEnC,MAAQ,EACHmC,IAET/B,EAAK2B,SAAS,CAAEhB,cA5BhB1B,QAAQC,IAAI,qBAFAc,mFAMZf,QAAQC,IAAI,kDA6BZ,OADAD,QAAQC,IAAI,kBAkBVC,EAAAC,EAAAC,cAACF,EAAAC,EAAM6C,SAAP,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,CACElD,cAAea,KAAKwB,MAAMV,SAASmB,OAAO,SAAAC,GAAC,OAAIA,EAAEnC,MAAQ,IAAGuC,SAE9DhD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAC+C,EAAD,CACEzB,SAAUd,KAAKwB,MAAMV,SACrBD,QAASb,KAAKmC,YACd5B,YAAaP,KAAKyB,gBAClBjB,SAAUR,KAAK+B,wBAvETrB,cCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94297288.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Stateless Functional Component\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log(\"NavBar - Rendered\");\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps\", prevProps);\r\n    console.log(\"prevState\", prevState);\r\n\r\n    if (prevProps.counter.value !== this.props.counter.value) {\r\n      // Ajax call and get new data from the server\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"Counter - Unmount\");\r\n  }\r\n  // state = {\r\n  //   count: this.props.counter.value,\r\n  //   tags: [\"tag1\", \"tag2\", \"tag3\"],\r\n  //   imageUrl: \"https://picsum.photos/200\"\r\n  // };\r\n\r\n  // renderTags() {\r\n  //   if (this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n  //   return (\r\n  //     <ul>\r\n  //       {/* {this.state.tags.map(tag => (\r\n  //         <li key={tag}>{tag}</li>\r\n  //       ))} */}\r\n  //     </ul>\r\n  //   );\r\n  // }\r\n\r\n  // constructor() {\r\n  //   super();\r\n  //   this.handleIncrement = this.handleIncrement.bind(this);\r\n  // }\r\n\r\n  // handleIncrement = product => {\r\n  //   console.log(product);\r\n  //   console.log(\"Increment clicked\", this);\r\n  //   this.setState({ count: this.state.count + 1 });\r\n  // };\r\n\r\n  // handleIncrement() {\r\n  //   console.log(\"Increment clicked\", this);\r\n  //   // obj.method();\r\n  //   // function();\r\n  // }\r\n\r\n  // doHandleIncrement = () => {\r\n  //   this.handleIncrement({ id: 1 });\r\n  // };\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    //classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    //const { count } = this.state;\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n\r\n  render() {\r\n    //console.log(\"props\", this.props);\r\n    console.log(\"Counter - Rendered\");\r\n    return (\r\n      <div>\r\n        {/* {this.props.children} */}\r\n        {/* <img src={this.state.imageUrl} alt=\"\" /> */}\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          //onClick={this.doHandleIncrement}\r\n          // onClick={() => {\r\n          //   this.handleIncrement({ id: 1 });\r\n          // }}\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n        {/* {this.state.tags.length === 0 && \"Please create a new tag\"}\r\n        {this.renderTags()} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log(\"Counters - Rendered\");\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor\");\n  }\n\n  componentDidMount() {\n    console.log(\"App - Mounted\");\n  }\n\n  handleIncrement = counter => {\n    //console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n    //console.log(this.state.counters[0]);\n  };\n\n  handleDelete = counterId => {\n    console.log(\"Event Handler Called\", counterId);\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n    return (\n      // <div className=\"App\">\n      //   <header className=\"App-header\">\n      //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      //     <p>\n      //       Edit <code>src/App.js</code> and save to reload.\n      //     </p>\n      //     <a\n      //       className=\"App-link\"\n      //       href=\"https://reactjs.org\"\n      //       target=\"_blank\"\n      //       rel=\"noopener noreferrer\"\n      //     >\n      //       Learn React\n      //     </a>\n      //   </header>\n      // </div>\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n//import Counters from \"./components/counters\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}